/*
 Generated by typeshare 1.12.0
 */

import Foundation

public enum NFTType: String, Codable, Equatable, Hashable, Sendable {
	case erc721
	case erc1155
	case spl
	case jetton
}

public struct NFTImage: Codable, Equatable, Hashable, Sendable {
	public let imageUrl: String
	public let previewImageUrl: String
	public let originalSourceUrl: String

	public init(imageUrl: String, previewImageUrl: String, originalSourceUrl: String) {
		self.imageUrl = imageUrl
		self.previewImageUrl = previewImageUrl
		self.originalSourceUrl = originalSourceUrl
	}
}

public struct NFTAttribute: Codable, Equatable, Hashable, Sendable {
	public let name: String
	public let value: String
	public let percentage: Double?

	public init(name: String, value: String, percentage: Double?) {
		self.name = name
		self.value = value
		self.percentage = percentage
	}
}

public struct NFTAsset: Codable, Equatable, Hashable, Identifiable, Sendable {
	public let id: String
	public let collectionId: String
	public let contractAddress: String?
	public let tokenId: String
	public let tokenType: NFTType
	public let name: String
	public let description: String?
	public let chain: Chain
	public let image: NFTImage
	public let attributes: [NFTAttribute]

	public init(id: String, collectionId: String, contractAddress: String?, tokenId: String, tokenType: NFTType, name: String, description: String?, chain: Chain, image: NFTImage, attributes: [NFTAttribute]) {
		self.id = id
		self.collectionId = collectionId
		self.contractAddress = contractAddress
		self.tokenId = tokenId
		self.tokenType = tokenType
		self.name = name
		self.description = description
		self.chain = chain
		self.image = image
		self.attributes = attributes
	}
}

public struct NFTCollection: Codable, Equatable, Hashable, Identifiable, Sendable {
	public let id: String
	public let name: String
	public let description: String?
	public let chain: Chain
	public let contractAddress: String
	public let image: NFTImage
	public let isVerified: Bool
	public let links: [AssetLink]

	public init(id: String, name: String, description: String?, chain: Chain, contractAddress: String, image: NFTImage, isVerified: Bool, links: [AssetLink]) {
		self.id = id
		self.name = name
		self.description = description
		self.chain = chain
		self.contractAddress = contractAddress
		self.image = image
		self.isVerified = isVerified
		self.links = links
	}
}

public struct NFTAssetData: Codable, Equatable, Hashable, Sendable {
	public let collection: NFTCollection
	public let asset: NFTAsset

	public init(collection: NFTCollection, asset: NFTAsset) {
		self.collection = collection
		self.asset = asset
	}
}

public struct NFTAssetId: Codable, Equatable, Hashable, Sendable {
	public let chain: Chain
	public let contractAddress: String
	public let tokenId: String

	public init(chain: Chain, contractAddress: String, tokenId: String) {
		self.chain = chain
		self.contractAddress = contractAddress
		self.tokenId = tokenId
	}
}

public struct NFTData: Codable, Equatable, Hashable, Sendable {
	public let collection: NFTCollection
	public let assets: [NFTAsset]

	public init(collection: NFTCollection, assets: [NFTAsset]) {
		self.collection = collection
		self.assets = assets
	}
}
