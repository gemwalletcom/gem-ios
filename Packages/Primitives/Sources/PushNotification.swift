/*
 Generated by typeshare 1.11.0
 */

import Foundation

public struct PushNotificationBuyAsset: Codable, Equatable, Sendable {
	public let assetId: String

	public init(assetId: String) {
		self.assetId = assetId
	}
}

public enum PushNotificationTypes: String, Codable, Equatable, Sendable {
	case test
	case transaction
	case priceAlert
	case buyAsset
	case swapAsset
}

public struct PushNotificationPayloadType: Codable, Equatable, Sendable {
	public let type: PushNotificationTypes

	public init(type: PushNotificationTypes) {
		self.type = type
	}
}

public struct PushNotificationPriceAlert: Codable, Equatable, Sendable {
	public let assetId: String

	public init(assetId: String) {
		self.assetId = assetId
	}
}

public struct PushNotificationSwapAsset: Codable, Equatable, Sendable {
	public let fromAssetId: String
	public let toAssetId: String

	public init(fromAssetId: String, toAssetId: String) {
		self.fromAssetId = fromAssetId
		self.toAssetId = toAssetId
	}
}

public struct PushNotificationTransaction: Codable, Equatable, Sendable {
	public let walletIndex: Int32
	public let assetId: String
	public let transactionId: String

	public init(walletIndex: Int32, assetId: String, transactionId: String) {
		self.walletIndex = walletIndex
		self.assetId = assetId
		self.transactionId = transactionId
	}
}
