/*
 Generated by typeshare 1.11.0
 */

import Foundation

public enum NodeState: String, Codable, CaseIterable, Equatable, Sendable {
	case active
	case inactive
}

public struct Node: Codable, Sendable {
	public let url: String
	public let status: NodeState
	public let priority: Int32

	public init(url: String, status: NodeState, priority: Int32) {
		self.url = url
		self.status = status
		self.priority = priority
	}
}

public struct ChainNode: Codable, Sendable {
	public let chain: String
	public let node: Node

	public init(chain: String, node: Node) {
		self.chain = chain
		self.node = node
	}
}

public struct ChainNodes: Codable, Sendable {
	public let chain: String
	public let nodes: [Node]

	public init(chain: String, nodes: [Node]) {
		self.chain = chain
		self.nodes = nodes
	}
}

public struct NodesResponse: Codable, Sendable {
	public let version: Int32
	public let nodes: [ChainNodes]

	public init(version: Int32, nodes: [ChainNodes]) {
		self.version = version
		self.nodes = nodes
	}
}
