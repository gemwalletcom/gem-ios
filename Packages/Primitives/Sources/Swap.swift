/*
 Generated by typeshare 1.11.0
 */

import Foundation

public struct SwapApprovalData: Codable, Equatable, Hashable, Sendable {
	public let spender: String

	public init(spender: String) {
		self.spender = spender
	}
}

public struct SwapProvider: Codable, Equatable, Hashable, Sendable {
	public let name: String

	public init(name: String) {
		self.name = name
	}
}

public struct SwapQuoteData: Codable, Equatable, Hashable, Sendable {
	public let to: String
	public let value: String
	public let data: String

	public init(to: String, value: String, data: String) {
		self.to = to
		self.value = value
		self.data = data
	}
}

public struct SwapQuote: Codable, Equatable, Hashable, Sendable {
	public let chainType: ChainType
	public let fromAmount: String
	public let toAmount: String
	public let feePercent: Float
	public let provider: SwapProvider
	public let data: SwapQuoteData?
	public let approval: SwapApprovalData?

	public init(chainType: ChainType, fromAmount: String, toAmount: String, feePercent: Float, provider: SwapProvider, data: SwapQuoteData?, approval: SwapApprovalData?) {
		self.chainType = chainType
		self.fromAmount = fromAmount
		self.toAmount = toAmount
		self.feePercent = feePercent
		self.provider = provider
		self.data = data
		self.approval = approval
	}
}

public struct SwapQuoteRequest: Codable, Sendable {
	public let fromAsset: String
	public let toAsset: String
	public let walletAddress: String
	public let destinationAddress: String?
	public let amount: String
	public let includeData: Bool

	public init(fromAsset: String, toAsset: String, walletAddress: String, destinationAddress: String?, amount: String, includeData: Bool) {
		self.fromAsset = fromAsset
		self.toAsset = toAsset
		self.walletAddress = walletAddress
		self.destinationAddress = destinationAddress
		self.amount = amount
		self.includeData = includeData
	}
}

public struct SwapQuoteResult: Codable, Equatable, Sendable {
	public let quote: SwapQuote

	public init(quote: SwapQuote) {
		self.quote = quote
	}
}

public enum SwapMode: String, Codable, Equatable, Sendable {
	case exactIn = "exactin"
	case exactOut = "exactout"
}
