/*
 Generated by typeshare 1.11.0
 */

import Foundation

public struct ERC2612Permit: Codable, Equatable, Sendable {
	public let owner: String
	public let spender: String
	public let value: String
	public let nonce: String
	public let deadline: String

	public init(owner: String, spender: String, value: String, nonce: String, deadline: String) {
		self.owner = owner
		self.spender = spender
		self.value = value
		self.nonce = nonce
		self.deadline = deadline
	}
}

public struct ERC2612Types: Codable, Equatable, Sendable {
	public let EIP712Domain: [EIP712Type]
	public let Permit: [EIP712Type]

	public init(EIP712Domain: [EIP712Type], Permit: [EIP712Type]) {
		self.EIP712Domain = EIP712Domain
		self.Permit = Permit
	}
}

public struct ERC2612PermitMessage: Codable, Equatable, Sendable {
	public let types: ERC2612Types
	public let primaryType: String
	public let domain: EIP712Domain
	public let message: ERC2612Permit

	public init(types: ERC2612Types, primaryType: String, domain: EIP712Domain, message: ERC2612Permit) {
		self.types = types
		self.primaryType = primaryType
		self.domain = domain
		self.message = message
	}
}
