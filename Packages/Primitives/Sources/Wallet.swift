/*
 Generated by typeshare 1.11.0
 */

import Foundation

public enum WalletType: String, Codable, Equatable, Hashable, Sendable {
	case multicoin
	case single
	case privateKey
	case view
}

public struct Wallet: Codable, Equatable, Sendable {
	public let id: String
	public let name: String
	public let index: Int32
	public let type: WalletType
	public let accounts: [Account]
	public let order: Int32
	public let isPinned: Bool

	public init(id: String, name: String, index: Int32, type: WalletType, accounts: [Account], order: Int32, isPinned: Bool) {
		self.id = id
		self.name = name
		self.index = index
		self.type = type
		self.accounts = accounts
		self.order = order
		self.isPinned = isPinned
	}
}

public struct WalletId: Codable, Equatable, Sendable {
	public let id: String

	public init(id: String) {
		self.id = id
	}
}
