/*
 Generated by typeshare 1.13.2
 */

import Foundation

public struct ApprovalData: Codable, Equatable, Hashable, Sendable {
	public let token: String
	public let spender: String
	public let value: String

	public init(token: String, spender: String, value: String) {
		self.token = token
		self.spender = spender
		self.value = value
	}
}

public struct QuoteAsset: Codable {
	public let id: String
	public let symbol: String
	public let decimals: UInt32

	public init(id: String, symbol: String, decimals: UInt32) {
		self.id = id
		self.symbol = symbol
		self.decimals = decimals
	}
}

public struct SwapQuote: Codable, Equatable, Hashable, Sendable {
	public let fromValue: String
	public let toValue: String
	public let provider: SwapProvider
	public let walletAddress: String
	public let slippageBps: UInt32

	public init(fromValue: String, toValue: String, provider: SwapProvider, walletAddress: String, slippageBps: UInt32) {
		self.fromValue = fromValue
		self.toValue = toValue
		self.provider = provider
		self.walletAddress = walletAddress
		self.slippageBps = slippageBps
	}
}

public struct SwapQuoteData: Codable, Equatable, Hashable, Sendable {
	public let to: String
	public let value: String
	public let data: String
	public let approval: ApprovalData?
	public let gasLimit: String?

	public init(to: String, value: String, data: String, approval: ApprovalData?, gasLimit: String?) {
		self.to = to
		self.value = value
		self.data = data
		self.approval = approval
		self.gasLimit = gasLimit
	}
}

public struct SwapData: Codable, Equatable, Hashable, Sendable {
	public let quote: SwapQuote
	public let data: SwapQuoteData

	public init(quote: SwapQuote, data: SwapQuoteData) {
		self.quote = quote
		self.data = data
	}
}
