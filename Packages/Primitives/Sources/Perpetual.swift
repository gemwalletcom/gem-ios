/*
 Generated by typeshare 1.13.2
 */

import Foundation

public struct Perpetual: Codable, Equatable, Hashable, Sendable {
	public let id: String
	public let name: String
	public let provider: PerpetualProvider
	public let assetId: AssetId
	public let identifier: String
	public let price: Double
	public let pricePercentChange24h: Double
	public let openInterest: Double
	public let volume24h: Double
	public let funding: Double
	public let leverage: [UInt8]

	public init(id: String, name: String, provider: PerpetualProvider, assetId: AssetId, identifier: String, price: Double, pricePercentChange24h: Double, openInterest: Double, volume24h: Double, funding: Double, leverage: [UInt8]) {
		self.id = id
		self.name = name
		self.provider = provider
		self.assetId = assetId
		self.identifier = identifier
		self.price = price
		self.pricePercentChange24h = pricePercentChange24h
		self.openInterest = openInterest
		self.volume24h = volume24h
		self.funding = funding
		self.leverage = leverage
	}
}

public struct PerpetualBalance: Codable, Equatable, Hashable, Sendable {
	public let available: Double
	public let reserved: Double
	public let withdrawable: Double

	public init(available: Double, reserved: Double, withdrawable: Double) {
		self.available = available
		self.reserved = reserved
		self.withdrawable = withdrawable
	}
}

public struct PerpetualData: Codable, Equatable, Hashable, Sendable {
	public let perpetual: Perpetual
	public let asset: Asset

	public init(perpetual: Perpetual, asset: Asset) {
		self.perpetual = perpetual
		self.asset = asset
	}
}

public struct PerpetualPositionData: Codable, Equatable, Hashable, Sendable {
	public let perpetual: Perpetual
	public let asset: Asset
	public let position: PerpetualPosition

	public init(perpetual: Perpetual, asset: Asset, position: PerpetualPosition) {
		self.perpetual = perpetual
		self.asset = asset
		self.position = position
	}
}

public struct PerpetualPositionsSummary: Codable, Equatable, Hashable, Sendable {
	public let positions: [PerpetualPosition]
	public let balance: PerpetualBalance

	public init(positions: [PerpetualPosition], balance: PerpetualBalance) {
		self.positions = positions
		self.balance = balance
	}
}

public enum PerpetualDirection: String, Codable, Equatable, Hashable, Sendable {
	case short
	case long
}
