/*
 Generated by typeshare 1.13.2
 */

import Foundation

public struct Release: Codable, Sendable {
	public let version: String
	public let store: PlatformStore
	public let upgradeRequired: Bool

	public init(version: String, store: PlatformStore, upgradeRequired: Bool) {
		self.version = version
		self.store = store
		self.upgradeRequired = upgradeRequired
	}
}

public struct ConfigVersions: Codable, Sendable {
	public let fiatOnRampAssets: Int32
	public let fiatOffRampAssets: Int32
	public let swapAssets: Int32

	public init(fiatOnRampAssets: Int32, fiatOffRampAssets: Int32, swapAssets: Int32) {
		self.fiatOnRampAssets = fiatOnRampAssets
		self.fiatOffRampAssets = fiatOffRampAssets
		self.swapAssets = swapAssets
	}
}

public struct SwapConfig: Codable, Sendable {
	public let enabledProviders: [SwapProvider]

	public init(enabledProviders: [SwapProvider]) {
		self.enabledProviders = enabledProviders
	}
}

public struct ConfigResponse: Codable, Sendable {
	public let releases: [Release]
	public let versions: ConfigVersions
	public let swap: SwapConfig

	public init(releases: [Release], versions: ConfigVersions, swap: SwapConfig) {
		self.releases = releases
		self.versions = versions
		self.swap = swap
	}
}
