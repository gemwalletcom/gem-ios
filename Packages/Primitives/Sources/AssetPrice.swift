/*
 Generated by typeshare 1.13.2
 */

import Foundation

public struct AssetMarket: Codable, Sendable {
	public let marketCap: Double?
	public let marketCapFdv: Double?
	public let marketCapRank: Int32?
	public let totalVolume: Double?
	public let circulatingSupply: Double?
	public let totalSupply: Double?
	public let maxSupply: Double?

	public init(marketCap: Double?, marketCapFdv: Double?, marketCapRank: Int32?, totalVolume: Double?, circulatingSupply: Double?, totalSupply: Double?, maxSupply: Double?) {
		self.marketCap = marketCap
		self.marketCapFdv = marketCapFdv
		self.marketCapRank = marketCapRank
		self.totalVolume = totalVolume
		self.circulatingSupply = circulatingSupply
		self.totalSupply = totalSupply
		self.maxSupply = maxSupply
	}
}

public struct AssetPrice: Codable, Sendable {
	public let assetId: AssetId
	public let price: Double
	public let priceChangePercentage24h: Double
	public let updatedAt: Date

	public init(assetId: AssetId, price: Double, priceChangePercentage24h: Double, updatedAt: Date) {
		self.assetId = assetId
		self.price = price
		self.priceChangePercentage24h = priceChangePercentage24h
		self.updatedAt = updatedAt
	}
}

public struct AssetPrices: Codable, Sendable {
	public let currency: String
	public let prices: [AssetPrice]

	public init(currency: String, prices: [AssetPrice]) {
		self.currency = currency
		self.prices = prices
	}
}

public struct AssetPricesRequest: Codable, Equatable, Sendable {
	public let currency: String?
	public let assetIds: [AssetId]

	public init(currency: String?, assetIds: [AssetId]) {
		self.currency = currency
		self.assetIds = assetIds
	}
}

public struct ChartValue: Codable, Sendable {
	public let timestamp: Int32
	public let value: Float

	public init(timestamp: Int32, value: Float) {
		self.timestamp = timestamp
		self.value = value
	}
}

public struct Charts: Codable, Sendable {
	public let price: Price?
	public let market: AssetMarket?
	public let prices: [ChartValue]
	public let marketCaps: [ChartValue]
	public let totalVolumes: [ChartValue]

	public init(price: Price?, market: AssetMarket?, prices: [ChartValue], marketCaps: [ChartValue], totalVolumes: [ChartValue]) {
		self.price = price
		self.market = market
		self.prices = prices
		self.marketCaps = marketCaps
		self.totalVolumes = totalVolumes
	}
}

public enum ChartPeriod: String, Codable, Sendable {
	case hour
	case day
	case week
	case month
	case quarter
	case year
	case all
}
