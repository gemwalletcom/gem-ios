/*
 Generated by typeshare 1.13.2
 */

import Foundation

public enum PerpetualMarginType: String, Codable, Equatable, Hashable, Sendable {
	case cross
	case isolated
}

public enum PerpetualOrderType: String, Codable, Equatable, Hashable, Sendable {
	case market
	case limit
}

public struct PerpetualTriggerOrder: Codable, Equatable, Hashable, Sendable {
	public let price: Double
	public let order_type: PerpetualOrderType
	public let order_id: String

	public init(price: Double, order_type: PerpetualOrderType, order_id: String) {
		self.price = price
		self.order_type = order_type
		self.order_id = order_id
	}
}

public struct PerpetualPosition: Codable, Equatable, Hashable, Sendable {
	public let id: String
	public let perpetualId: String
	public let assetId: AssetId
	public let size: Double
	public let sizeValue: Double
	public let leverage: UInt8
	public let entryPrice: Double?
	public let liquidationPrice: Double?
	public let marginType: PerpetualMarginType
	public let direction: PerpetualDirection
	public let marginAmount: Double
	public let takeProfit: PerpetualTriggerOrder?
	public let stopLoss: PerpetualTriggerOrder?
	public let pnl: Double
	public let funding: Float?

	public init(id: String, perpetualId: String, assetId: AssetId, size: Double, sizeValue: Double, leverage: UInt8, entryPrice: Double?, liquidationPrice: Double?, marginType: PerpetualMarginType, direction: PerpetualDirection, marginAmount: Double, takeProfit: PerpetualTriggerOrder?, stopLoss: PerpetualTriggerOrder?, pnl: Double, funding: Float?) {
		self.id = id
		self.perpetualId = perpetualId
		self.assetId = assetId
		self.size = size
		self.sizeValue = sizeValue
		self.leverage = leverage
		self.entryPrice = entryPrice
		self.liquidationPrice = liquidationPrice
		self.marginType = marginType
		self.direction = direction
		self.marginAmount = marginAmount
		self.takeProfit = takeProfit
		self.stopLoss = stopLoss
		self.pnl = pnl
		self.funding = funding
	}
}
