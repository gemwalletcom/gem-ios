/*
 Generated by typeshare 1.13.2
 */

import Foundation

public enum PerpetualMarginType: String, Codable, Equatable, Sendable {
	case cross
	case isolated
}

public struct PriceTarget: Codable, Equatable, Sendable {
	public let price: Double?
	public let percentage: Double?

	public init(price: Double?, percentage: Double?) {
		self.price = price
		self.percentage = percentage
	}
}

public struct PerpetualPosition: Codable, Equatable, Sendable {
	public let id: String
	public let perpetual_id: String
	public let size: Double
	public let leverage: UInt8
	public let liquidation_price: Double?
	public let margin_type: PerpetualMarginType
	public let margin_amount: Double
	public let take_profit: PriceTarget?
	public let stop_loss: PriceTarget?
	public let pnl: Double
	public let funding: Float?

	public init(id: String, perpetual_id: String, size: Double, leverage: UInt8, liquidation_price: Double?, margin_type: PerpetualMarginType, margin_amount: Double, take_profit: PriceTarget?, stop_loss: PriceTarget?, pnl: Double, funding: Float?) {
		self.id = id
		self.perpetual_id = perpetual_id
		self.size = size
		self.leverage = leverage
		self.liquidation_price = liquidation_price
		self.margin_type = margin_type
		self.margin_amount = margin_amount
		self.take_profit = take_profit
		self.stop_loss = stop_loss
		self.pnl = pnl
		self.funding = funding
	}
}
