/*
 Generated by typeshare 1.13.2
 */

import Foundation

public enum HypercorePositionType: String, Codable, Sendable {
	case oneWay
}

public enum HypercoreLeverageType: String, Codable, Sendable {
	case cross
	case isolated
}

public struct HypercoreLeverage: Codable, Sendable {
	public let type: HypercoreLeverageType
	public let value: UInt32

	public init(type: HypercoreLeverageType, value: UInt32) {
		self.type = type
		self.value = value
	}
}

public struct HypercoreCumulativeFunding: Codable, Sendable {
	public let allTime: String
	public let sinceOpen: String

	public init(allTime: String, sinceOpen: String) {
		self.allTime = allTime
		self.sinceOpen = sinceOpen
	}
}

public struct HypercorePosition: Codable, Sendable {
	public let coin: String
	public let szi: String
	public let leverage: HypercoreLeverage
	public let entryPx: String
	public let positionValue: String
	public let unrealizedPnl: String
	public let returnOnEquity: String
	public let liquidationPx: String?
	public let marginUsed: String
	public let maxLeverage: UInt32
	public let cumFunding: HypercoreCumulativeFunding

	public init(coin: String, szi: String, leverage: HypercoreLeverage, entryPx: String, positionValue: String, unrealizedPnl: String, returnOnEquity: String, liquidationPx: String?, marginUsed: String, maxLeverage: UInt32, cumFunding: HypercoreCumulativeFunding) {
		self.coin = coin
		self.szi = szi
		self.leverage = leverage
		self.entryPx = entryPx
		self.positionValue = positionValue
		self.unrealizedPnl = unrealizedPnl
		self.returnOnEquity = returnOnEquity
		self.liquidationPx = liquidationPx
		self.marginUsed = marginUsed
		self.maxLeverage = maxLeverage
		self.cumFunding = cumFunding
	}
}

public struct HypercoreAssetPosition: Codable, Sendable {
	public let type: HypercorePositionType
	public let position: HypercorePosition

	public init(type: HypercorePositionType, position: HypercorePosition) {
		self.type = type
		self.position = position
	}
}

public struct HypercoreMarginSummary: Codable, Sendable {
	public let accountValue: String
	public let totalNtlPos: String
	public let totalRawUsd: String
	public let totalMarginUsed: String

	public init(accountValue: String, totalNtlPos: String, totalRawUsd: String, totalMarginUsed: String) {
		self.accountValue = accountValue
		self.totalNtlPos = totalNtlPos
		self.totalRawUsd = totalRawUsd
		self.totalMarginUsed = totalMarginUsed
	}
}

public struct HypercoreAssetPositions: Codable, Sendable {
	public let assetPositions: [HypercoreAssetPosition]
	public let marginSummary: HypercoreMarginSummary
	public let crossMarginSummary: HypercoreMarginSummary
	public let crossMaintenanceMarginUsed: String
	public let withdrawable: String

	public init(assetPositions: [HypercoreAssetPosition], marginSummary: HypercoreMarginSummary, crossMarginSummary: HypercoreMarginSummary, crossMaintenanceMarginUsed: String, withdrawable: String) {
		self.assetPositions = assetPositions
		self.marginSummary = marginSummary
		self.crossMarginSummary = crossMarginSummary
		self.crossMaintenanceMarginUsed = crossMaintenanceMarginUsed
		self.withdrawable = withdrawable
	}
}
