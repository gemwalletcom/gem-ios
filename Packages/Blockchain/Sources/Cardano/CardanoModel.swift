/*
 Generated by typeshare 1.11.0
 */

import Foundation

public struct CardanoTransactionId: Codable, Sendable {
	public let id: String

	public init(id: String) {
		self.id = id
	}
}

public struct Cardano: Codable, Sendable {
	public let updatableParameters: CardanoTransactionId

	public init(updatableParameters: CardanoTransactionId) {
		self.updatableParameters = updatableParameters
	}
}

public struct CardanoAdaLovelace: Codable, Sendable {
	public let lovelace: UInt64

	public init(lovelace: UInt64) {
		self.lovelace = lovelace
	}
}

public struct CardanoAdaValue: Codable, Sendable {
	public let ada: CardanoAdaLovelace

	public init(ada: CardanoAdaLovelace) {
		self.ada = ada
	}
}

public struct CardanoBlockTip: Codable, Sendable {
	public let slot: Int32

	public init(slot: Int32) {
		self.slot = slot
	}
}

public struct CardanoUpdatableParameters: Codable, Sendable {
	public let minFeeConstant: CardanoAdaValue
	public let minFeeCoefficient: Int32
	public let networkMagic: Int32

	public init(minFeeConstant: CardanoAdaValue, minFeeCoefficient: Int32, networkMagic: Int32) {
		self.minFeeConstant = minFeeConstant
		self.minFeeCoefficient = minFeeCoefficient
		self.networkMagic = networkMagic
	}
}

public struct CardanoGenesisConfiguration: Codable, Sendable {
	public let updatableParameters: CardanoUpdatableParameters

	public init(updatableParameters: CardanoUpdatableParameters) {
		self.updatableParameters = updatableParameters
	}
}

public struct CardanoTransactionBroadcast: Codable, Sendable {
	public let transaction: CardanoTransactionId

	public init(transaction: CardanoTransactionId) {
		self.transaction = transaction
	}
}

public struct CardanoUTXO: Codable, Sendable {
	public let index: Int32
	public let address: String
	public let transaction: CardanoTransactionId
	public let value: CardanoAdaValue

	public init(index: Int32, address: String, transaction: CardanoTransactionId, value: CardanoAdaValue) {
		self.index = index
		self.address = address
		self.transaction = transaction
		self.value = value
	}
}
