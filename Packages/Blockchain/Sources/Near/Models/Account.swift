/*
 Generated by typeshare 1.11.0
 */

import Foundation

public struct NearAccount: Codable, Sendable {
	public let amount: String

	public init(amount: String) {
		self.amount = amount
	}
}

public struct NearAccountAccessKey: Codable, Sendable {
	public let nonce: Int

	public init(nonce: Int) {
		self.nonce = nonce
	}
}

public struct NearBlockHeader: Codable, Sendable {
	public let hash: String
	public let height: Int

	public init(hash: String, height: Int) {
		self.hash = hash
		self.height = height
	}
}

public struct NearBlock: Codable, Sendable {
	public let header: NearBlockHeader

	public init(header: NearBlockHeader) {
		self.header = header
	}
}

public struct NearBroadcastTransaction: Codable, Sendable {
	public let hash: String

	public init(hash: String) {
		self.hash = hash
	}
}

public struct NearBroadcastResult: Codable, Sendable {
	public let final_execution_status: String
	public let transaction: NearBroadcastTransaction

	public init(final_execution_status: String, transaction: NearBroadcastTransaction) {
		self.final_execution_status = final_execution_status
		self.transaction = transaction
	}
}

public struct NearError: Codable, Sendable {
	public let message: String
	public let data: String?

	public init(message: String, data: String?) {
		self.message = message
		self.data = data
	}
}

public struct NearGasPrice: Codable, Sendable {
	public let gas_price: String

	public init(gas_price: String) {
		self.gas_price = gas_price
	}
}

public struct NearGenesisConfig: Codable, Sendable {
	public let chain_id: String

	public init(chain_id: String) {
		self.chain_id = chain_id
	}
}

public struct NearRPCError: Codable, Sendable {
	public let error: NearError

	public init(error: NearError) {
		self.error = error
	}
}
