/*
 Generated by typeshare 1.13.2
 */

import Foundation

public struct SuiStake: Codable, Sendable {
	public let stakedSuiId: String
	public let status: String
	public let principal: String
	public let stakeRequestEpoch: String
	public let stakeActiveEpoch: String
	public let estimatedReward: String?

	public init(stakedSuiId: String, status: String, principal: String, stakeRequestEpoch: String, stakeActiveEpoch: String, estimatedReward: String?) {
		self.stakedSuiId = stakedSuiId
		self.status = status
		self.principal = principal
		self.stakeRequestEpoch = stakeRequestEpoch
		self.stakeActiveEpoch = stakeActiveEpoch
		self.estimatedReward = estimatedReward
	}
}

public struct SuiStakeDelegation: Codable, Sendable {
	public let validatorAddress: String
	public let stakingPool: String
	public let stakes: [SuiStake]

	public init(validatorAddress: String, stakingPool: String, stakes: [SuiStake]) {
		self.validatorAddress = validatorAddress
		self.stakingPool = stakingPool
		self.stakes = stakes
	}
}

public struct SuiSystemState: Codable, Sendable {
	public let epoch: String
	public let epochStartTimestampMs: String
	public let epochDurationMs: String

	public init(epoch: String, epochStartTimestampMs: String, epochDurationMs: String) {
		self.epoch = epoch
		self.epochStartTimestampMs = epochStartTimestampMs
		self.epochDurationMs = epochDurationMs
	}
}

public struct SuiValidator: Codable, Sendable {
	public let address: String
	public let apy: Double

	public init(address: String, apy: Double) {
		self.address = address
		self.apy = apy
	}
}

public struct SuiValidators: Codable, Sendable {
	public let apys: [SuiValidator]

	public init(apys: [SuiValidator]) {
		self.apys = apys
	}
}
